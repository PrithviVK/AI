# -*- coding: utf-8 -*-
"""programing_assignment_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13QD17jOR-eZwbvvXzcbfGCVF7lHghTgL
"""

import keras
import pickle
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, BatchNormalization
from keras import backend as K
from keras.models import load_model
import matplotlib.pyplot as plt
import random as rnd
import numpy as np
from sklearn.preprocessing import MinMaxScaler

"""Mounting google drive"""

from google.colab import drive
drive.mount('/content/drive')

"""Read dataset: chef_data.pickle

The inputs are 22-element binary vectors. Each element represents one of the 22 chefs, with a 1 indicating that the chef participated in a given project and a 0 meaning that they did not. The outputs are 4-element vectors.
"""

with open('/content/drive/MyDrive/chef_data.pickle', 'rb') as f:
    (x_train, y_train), (x_test, y_test) = pickle.load(f)

"""# Scaling outputs to be larger than 0 and less than 1
(Not exactly 0 or 1, because we want to use the sigmoid function that can only approach but never reach these values)
"""

y_train_norm = (y_train - [-1, -1, 0, -100000]) / [12, 12, 2000, 300000]
y_test_norm = (y_test - [-1, -1, 0, -100000]) / [12, 12, 2000, 300000]

"""Question1(10 points):
write code to get the input dimensions from x_train
"""

batch_size = 100
num_outputs = 4
epochs = 100
num_inputs =x_train.shape[1]
print(num_inputs)

######
input_shape = (num_inputs,)

"""Question(50 points):
Add neural network layers to match the model architecture.

Architecture:

hidden_layer1 (Dense) (None, 20)

hidden_layer2 (Dense) (None, 20)

hidden_layer3 (Dense) (None, 20)


output (Dense) (None, 4)
"""

model = Sequential()
model.add(Dense(20, input_shape=input_shape, activation='relu', name='input'))
# model.add(BatchNormalization())
model.add(Dense(20, activation='tanh',name='hidden_layer1'))
# model.add(Dropout(0.1))
model.add(Dense(20, activation='tanh', name='hidden_layer2'))
# model.add(Dropout(0.1))
model.add(Dense(20, activation='tanh',name='hidden_layer3'))
# model.add(Dropout(0.1))
model.add(Dense(4, activation='sigmoid',name='output'))


############

"""Question 3(40 points):

Design model.compile and model.fit calls to train the model.

1) model.compile should use mse(mean square error) as loss, adam() as optimizer with learning rate =0.05, and metrics as accuracy.

2)model.fit should use epochs=100 and batch_size=100
"""

opt = keras.optimizers.Adam(learning_rate=0.05)
model.compile(optimizer=opt, loss='mean_squared_error', metrics=['accuracy'])
model.fit(x_train, y_train_norm, batch_size = 100, epochs = 100)


##############
model.summary()

# Get the rescaled predictions for the test set and compute their deviation from the desired ones
y_predict_norm = model.predict(x_test)


y_predict = y_predict_norm * [12, 12, 3000, 300000] - [1, 1, 0, 100000]
y_diff = y_predict - y_test
y_stdev = np.std(y_diff, axis=0)

print(y_stdev)

plt.plot(y_predict[:50,1])
plt.plot(y_test[:50,1])

plt.show()

